---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by 54237.
--- DateTime: 2020/8/1 23:01
---

local StaticAgency = class("StaticAgency", Entity)
local AttributeType = require("GamePlay/Client/Components/AttributeType")

function IsEnemy(entityID)
    local target = EntityMgr:GetEntity(entityID)
    if target then
        return false
    end
    return IsEntityEnemy(target)
end

function IsEntityEnemy(target)
    return TargetSelectionMgr:CheckTarget(MeMgr:GetEntity(), target, UNIT_CAMP_TYPE.Enemy, UNIT_TYPE.All)
end

function StaticAgency:ctor()
    Entity.ctor(self)
    self.unit = nil
    self.lastUnitState = UNIT_STATE.None
    self.unitState = UNIT_STATE.Idle
    self.mountState = MOUNT_STATE.UnUse
    self.distanceToSelf = 0
    self.skillPublicCDTriggerTime = 0
    self.skillPublicCDTime = 0
    self.noHudBar = false
    self.spawnLocation = nil
    self.lastHitTime = 0

    --坐骑ID
    self.mountIdent = 0
    --变身ID
    self.transformationIdent = 0

    -- 这里只是声明有哪些属性
    self:SetAttribute(AttributeType.Hp, 0)
    self:SetAttribute(AttributeType.MaxHp, 0)
    self:SetAttribute(AttributeType.Mp, 0)
    self:SetAttribute(AttributeType.MaxMp, 0)
    self:SetAttribute(AttributeType.TurnSpeed, 0)
    self:SetAttribute(AttributeType.Height, 0)
    self:SetAttribute(AttributeType.Radius, 0)

    self.animatorSystem = self:AddSystem(AnimatorSystem)
    self.avatarSystem = self:AddSystem(AvatarSystem)
    self.surfaceSystem = self:AddSystem(SurfaceSystem)
    self.dummyPointSystem = self:AddSystem(DummyPointSystem)
    self.modelStateSystem = self:AddSystem(ModelStateSystem)

    self.stateSystem = self:AddSystem(StateSystem)

    if LocalServerMgr:InLocal() then
        self.physicSystem = self:AddSystem(PhysicSystem)
    end
end

function StaticAgency:Init()
    Entity.Init(self)

    self:InitAttributes()
    self.specialBit64 = uint64.new(0, 0)
    self.isDead = false
    self.curSkill = nil

    --只有法师职业才有
    if (self.job == 1 or self.job == 21) then
        self.mageSubWeaponSystem = self:AddSystem(MageSubWeaponSystem)
    end

    self.unit:SetIsStaticAgency()
    self:InitTag()
    if self.hpbar == nil and (not self.noHudBar) and self:IsShowName(self.config.Type) then
        self.hpbar = UIMgr:CreateHealthBar(self)
    end
end

function StaticAgency:InitAttributes()
    self:SetMoveSpeed(self.config.MoveSpeed)

    self:SetAttribute(AttributeType.TurnSpeed, self.config.TurnSpeed)
    self:SetAttribute(AttributeType.Height, self.config.Height)
    self:SetAttribute(AttributeType.Radius, self.config.Radius)
end

function StaticAgency:InitTag()
    if self:IsPlayer() then
        self.unit.gameObject.tag = ENTITY_TAG_PLAYER
    elseif self:IsNPC() then
        self.unit.gameObject.tag = ENTITY_TAG_NPC
    else
        self.unit.gameObject.tag = ENTITY_TAG_StaticAgency
    end
end

function StaticAgency:UnInit()
    --远离视野范围后要清除一下选择目标
    if self.hpbar ~= nil then
        UIMgr:DisposeHealthBar(self.hpbar)
        self.hpbar = nil
        EventDispatcher:DispatchEvent(EVENT_HUD_WINDOW_SETHPVISABLE, false )
    end
    if self.idleEffect ~= nil then
        self.idleEffect:UnloadFX()
        self.idleEffect = nil
    end
    if self.moveEffect ~= nil then
        self.moveEffect:UnloadFX()
        self.moveEffect = nil
    end
    TargetSelectionMgr:ClearTarget(self.id)
    Entity.UnInit(self)
    self.attributes = {}

    self.lastUnitState = UNIT_STATE.None
    self.unitState = UNIT_STATE.Idle
    if (self.config ~= nil and self.config.DefaultState ~= nil) then
        self.unitState = self.config.DefaultState
    end
    self.mountState = MOUNT_STATE.UnUse
end

function StaticAgency:Dispose()
    if self.hpbar ~= nil then
        UIMgr:DisposeHealthBar(self.hpbar)
        self.hpbar = nil
    end
end

function StaticAgency:SetSelfTag()
    self.unit.gameObject.tag = ENTITY_TAG_SELF
end

function StaticAgency:IsBoss()
    return self.type == UnitClassType.SceneStaticAgency and self.monsterType == 2
end

function StaticAgency:OnDrawGizmos()
    if self.debugPath ~= nil then
        local srcPos = self.debugSrcPos
        Gizmos.color = Color.white
        for _, item in pairs(self.debugPath) do
            Gizmos.DrawLine(srcPos, item)
            srcPos = item
        end
        local str = string.format("( %.2f", srcPos.x) .. ", " .. string.format("%.2f )", srcPos.z)
        LuaHelper.DrawString(str, srcPos, Color.red)
    end

end

function StaticAgency:OnMoveStart()
end

function StaticAgency:OnMoveStop()
end

function StaticAgency:SetUnitState(unitState, force)
    --NPC不接受服务器的状态变化，NPC的状态请使用entityTemp的defaultState字段
    if (self:IsNPC()) then
        return
    end

    if (not force) then
        if (self.unitState == unitState) then
            return
        elseif (self.unitState == UNIT_STATE.Stash) then
            self.lastUnitState = unitState
            if (unitState == UNIT_STATE.Dizzy) then
                self.animatorSystem:DoDizzyStatus()
            else
                self.animatorSystem:ResetBuffState()
            end
            return
        else
            self.lastUnitState = self.unitState
            self.unitState = unitState
        end
    else
        self.lastUnitState = self.unitState
        self.unitState = unitState
    end

    if (self.unitState == UNIT_STATE.Idle) then
        if MeMgr:IsMe(self.id) then
            MeMgr:ChangeMeState(MeStateType.Normal)
            CameraMgr:SwitchDefaultCamera(CameraFunctionType.Normal)
        end
        self.animatorSystem:DoIdleStatus()
    elseif (self.unitState == UNIT_STATE.Fight) then
        if MeMgr:IsMe(self.id) then
            MeMgr:ChangeMeState(MeStateType.Battle)
        end
        self.animatorSystem:DoFightStatus()
    elseif (self.unitState == UNIT_STATE.Sneak) then
        self.animatorSystem:DoSneakStatus()
    elseif (self.unitState == UNIT_STATE.Dizzy) then
        self.animatorSystem:DoDizzyStatus()
    elseif (self.unitState == UNIT_STATE.InSafeZone) then
        self.animatorSystem:DoIdleStatus()
    elseif (self.unitState == UNIT_STATE.INTERACT_ACTATIVE) then
        self.animatorSystem:DoInteractStatus(UNIT_STATE.INTERACT_ACTATIVE)
    elseif (self.unitState == UNIT_STATE.INTERACT_LOOKINTO) then
        self.animatorSystem:DoInteractStatus(UNIT_STATE.INTERACT_LOOKINTO)
    elseif (self.unitState == UNIT_STATE.Stash) then
        self.animatorSystem:DoStashStatus()
    elseif (self.unitState == UNIT_STATE.Die) then
        self.animatorSystem:DoDead()
    elseif (self.unitState == UNIT_STATE.Talk) then
        self.animatorSystem:DoTalk()
    end

    --BUFF层重置
    if (self.lastUnitState == UNIT_STATE.INTERACT_ACTATIVE or
            self.lastUnitState == UNIT_STATE.INTERACT_LOOKINTO or
            self.lastUnitState == UNIT_STATE.Dizzy) then
        self.animatorSystem:ResetBuffState()
    end
end

function StaticAgency:SetMountState(mountState, id, showFx)
    if (mountState == self.mountState) then
        return
    end
    self.mountState = mountState
    if (showFx == nil) then
        showFx = true
    end
    if (self.mountState == MOUNT_STATE.Use) then
        self.mountIdent = id
        if (self.mountSystem ~= nil) then
            self.mountSystem:Load(id)
            if (showFx) then
                EffectMgr:CreateEffectUtilityByObj(ResPathConfig.ZUO_QI_SHANG_EFFECT, self, EFFECT_DUMMY_TYPE.Origin, 2, nil, nil, GetPublicEffectLod())
            end
        end
    elseif (self.mountState == MOUNT_STATE.UnUse) then
        self.mountIdent = 0
        if (self.mountSystem ~= nil) then
            self.mountSystem:UnLoad()
            if (showFx) then
                EffectMgr:CreateEffectUtilityByObj(ResPathConfig.ZUO_QI_EFFECT, self, EFFECT_DUMMY_TYPE.Origin, 2, nil, nil, GetPublicEffectLod())
            end
        end
    end
end

function StaticAgency:SetTransformation(transformationState, id)
    if (transformationState) then
        self.transformationIdent = id
        if (MeMgr:IsMe(self.id)) then
            local config = TransformConfig[id]
            if (config == nil) then
                return
            end
            CameraMgr:EnableTransformationCamera(self.unit.gameObject, 0, config.DefCam, config.CamMin, config.CamMax)
        end
    else
        self.transformationIdent = 0
        if (MeMgr:IsMe(self.id)) then
            CameraMgr:DisableTransformationCamera()
        end
    end
end

function StaticAgency:StopMove(triggeredType)
    if triggeredType ~= MOVE_TRIGGERED_TYPE.BY_CONNER_MAP then
        if self.commandSystem ~= nil then
            self.commandSystem:ClearMoveCmd()
        end
    end
    self.stateSystem:ExitMoveState(triggeredType)
end

function StaticAgency:GetEffectDummyPos(type)
    return self.dummyPointSystem:GetEffectDummyPos(type)
end

function StaticAgency:GetEffectDummyTrans(type)
    return self.dummyPointSystem:GetEffectDummyTrans(type)
end

function StaticAgency:IsPlayer()
    return false;
end

function StaticAgency:IsStaticAgency()
    return true
end

function StaticAgency:IsBoss()
    return self.type == EntityClassType.Boss
end

function StaticAgency:IsMe()
    return MeMgr:IsMe(self.id)
end

function StaticAgency:IsAlive()
    return not self.isDead and not self.bDestroyed
end

function StaticAgency:AddHp(hp, flag, attacker, suckBlood)
    self:SetHp(self:GetHp() + hp)
    if self:GetHp() <= 0 then
        self.attacker = attacker
    end
    if self.isLocal and self:GetHp() <= 0 then
        self:Kill()
    end
    if MeMgr:IsMe(self.id) or (attacker ~= nil and (MeMgr:IsMe(attacker.id) or attacker:IsHero() and attacker:IsMyHero())) then
        EmitMgr:OnHpChanged(attacker, self, flag, hp, suckBlood)
    end
end

function StaticAgency:OnDead()
    Entity.OnDead(self)
    --if self.idleEffect ~= nil then
    --    self.idleEffect:UnloadFX()
    --    self.idleEffect = nil
    --end
    --if self.moveEffect ~= nil then
    --    self.moveEffect:UnloadFX()
    --    self.moveEffect = nil
    --end

    -- 移除死亡时需要移除的特效
    for effect in pairs(self.effects) do
        if effect.removeOnDeath then
            effect.entity = nil
            effect:UnloadFX()
            self.effects[effect] = nil
        end
    end

    --死亡后要清除一下选择目标
    TargetSelectionMgr:ClearTarget(self.id)
    self:StopMove()
    --self.unit:Dead()
    --self.skillSystem:OnDead()
    self.surfaceSystem:OnDead()
end

function StaticAgency:OnRevive()
end

function StaticAgency:Hide(hide)
    Entity.Hide(self, hide)
    --显示要调用一下changeRender不然一些系统状态会异常
    if (not hide) then
        self:OnChangeRender()
    end
    if (self.mageSubWeaponSystem ~= nil) then
        if (self.mageSubWeaponSystem.mageSubWeapon ~= nil) then
            self.mageSubWeaponSystem.mageSubWeapon:SetActive(not hide)
        end
    end
end

function StaticAgency:SetRevive()
    self.isDead = false
    self:OnRevive()
end

function StaticAgency:OnWin()
    self.animatorSystem:DoAnimator(ANIMATION_TYPE.Win, 1)
end

function StaticAgency:OnWinEnd()
    self.animatorSystem:DoAnimator(ANIMATION_TYPE.Win, 2)
end

function StaticAgency:DoAnimator(type, value)
    self.animatorSystem:DoAnimator(type, value)
end

function StaticAgency:CanMove()
    return self.stateSystem:CanMove() and self.buffSystem:CanMove()
end

function StaticAgency:CanSelection()
    if (not self:IsAlive()) then
        return false
    end
    if (self.config ~= nil) then
        local showConfig = EntityTypeConfig[self.config.ShowType]
        if (showConfig ~= nil and not showConfig.CanTarget) then
            return false
        end
    end
    if not self.buffSystem:CanSelection() then
        return false
    end
    return true
end

function StaticAgency:SetIKEffector(eff, weightVar, pos)
    self.ikSystem:SetIKEffector(eff, weightVar, nil, pos)
end

function StaticAgency:IsNear(pointName)
    if pointName == ScenePointsCollection.GetNearestDistancePoint(self:GetPos()) then
        return true
    end
    return false
end

function StaticAgency:DoHit(hitIndex, casterEntity)
    if (not self.stateSystem:IsInAttackState() or casterEntity:IsBoss()) and not self:InBlockTime() then
        self.animatorSystem:DoAnimator(ANIMATION_TYPE.OnHit, hitIndex)
    end
end

function StaticAgency:IsInAttackState()
    return self.stateSystem:IsInAttackState()
end

function StaticAgency:IsInMoveState()
    return self.stateSystem:IsInMoveState()
end

function StaticAgency:IsInMoveByPathState()
    return self.stateSystem:IsInMoveByPathState()
end

function StaticAgency:IsInMoveByDir()
    return self.stateSystem:IsInMoveByDir()
end

function StaticAgency:AddBuff(id)
    return self.buffSystem:AddBuff(id)
end

function StaticAgency:RemoveBuff(id)
    self.buffSystem:RemoveBuff(id)
end

function StaticAgency:InitSpecialBit64(bit64)
    self:ResetSpecialBit64(bit64, false)
end

function StaticAgency:InitCreatureStatus(bit64)
    if testbit(bit64, CREATURE_STATE.CS_STATE_DIED) then
        --感觉其它状态不需要设置
        --self:SetDead(true)
        self:Kill()
    end
end

function StaticAgency:ResetSpecialBit64(bit64, playAddEffect)
    -- WLog('ResetSpecialBit64' .. self.name .. " bit" .. bit64 .. bit64)
    for i = 0, 64 do
        local buffId = 1000 + i
        local changed = false
        if i < 32 then
            if testbit32_low(bit64, i) then
                if not self.buffSystem:HasBuff(buffId) then
                    self.buffSystem:AddBuff(buffId)
                    changed = true
                end
            end
        else
            if testbit32_high(bit64, i) then
                if not self.buffSystem:HasBuff(buffId) then
                    self.buffSystem:AddBuff(buffId)
                    changed = true
                end
            end
        end
        if playAddEffect and changed and (i == 0 or i == 1) then
            if self.config.SpecialEffectValueEx ~= nil then
                for ii, v in pairs(self.config.SpecialEffectValueEx) do
                    if i == v.k then
                        ActionMgr:ParserActionByName(v.v, self, self, self:GetPos())
                    end
                end
            end
        end
    end
end

function StaticAgency:ShowStruck(msg)
    if not testbit32_low(msg.MsgFlag, STRUCK_TYPE_BIT_POS.Miss) then
        Entity.ShowStruck()
        if TIME_NOW - self.lastHitTime > 0.5 then
            self.lastHitTime = TIME_NOW
            self.animatorSystem:DoHit()
            self.surfaceSystem:DoHit(1, 0.5)
            if msg.Damage > 0 then
                -- 加血不方法受击声音
                if self.config.HitSound ~= nil then
                    SoundMgr:playSfx(self.config.HitSound, self.gameObject, false)
                end
                if self.config.HitSound2 ~= nil then
                    SoundMgr:playSfx(self.config.HitSound2, self.gameObject, false)
                end
            end
            if self.config.HitEffect ~= nil then
                if self.config.HitBindPlace == nil then
                    self.config.HitBindPlace = EFFECT_DUMMY_TYPE.Origin
                end
                EffectMgr:CreateEffectUtilityByObj(self.config.HitEffect, self, self.config.HitBindPlace, 2)
            end
        end
    end
end

function StaticAgency:GetScreenPos()
    local pos
    local ownerPos = self:GetPos()
    local offsetY = self.config.OffsetY or 3
    if offsetY ~= nil then
        ownerPos.y = ownerPos.y + offsetY
    end
    if Camera.main == nil then
        return Vector3.zero
    end
    pos = Camera.main:WorldToScreenPoint(ownerPos);
    return pos
end

--坐标是否在屏幕范围
function StaticAgency:isInView(pos)
    if pos.z > 0 then
        if pos.x > 0 and pos.x < UIMgr.uiWidth then
            if pos.y > 0 and pos.y < UIMgr.uiHeight then
                return true
            end
        end
    else
        return false
    end
end

function StaticAgency:isInRange()
    local me = MeMgr:GetEntity()
    if me == nil then
        return false
    end

    return Vector3.Distance(self:GetPosReadOnly(), me:GetPosReadOnly()) < TargetSelectionMgr.selectionOutOfSight
end

function StaticAgency:MoveToPosition(pos, leftDistance)
    if leftDistance == nil then
        leftDistance = 0
    end
    self.stateSystem:EnterMoveToTargetState(nil, pos, leftDistance)
end

function StaticAgency:MoveToPosByFindPathOnce(pos, leftDistance)
    local path = NavMeshMgr:GenerateSmoothedPath(self:GetPos(), pos, false, true)
    self.stateSystem:EnterMoveByPathState(path, 0, ENTITY_STATE_TYPE.MoveByPath, leftDistance)
end

function StaticAgency:MoveToPosByFindPath(pos, finalLookAtPos, leftDistance, flushPathInterval)
    if leftDistance == nil then
        leftDistance = 0
    end
    return self.stateSystem:EnterMoveToTargetByFindingPathState(nil, pos, leftDistance, nil, finalLookAtPos, flushPathInterval)
end

function StaticAgency:GetMovePath()
    return self.stateSystem:GetMovePath()
end

function StaticAgency:LaunchSkill(skillIndex, targetEntity, targetPos)
    if (self.skillSystem == nil) then
        return false
    end

    if (not self.skillSystem:CheckCanDoSkillAction(skillIndex, targetEntity)) then
        return false
    end

    if self.commandSystem ~= nil then
        TargetSelectionMgr:SetTarget(targetEntity)
        self.commandSystem:EnqueueSkillCmd(skillIndex, nil, targetEntity, targetPos)
    else
        self.stateSystem:EnterAttackState(skillIndex, nil, targetEntity, targetPos)
    end

    return true
end

function StaticAgency:IsShowName(entityType)
    local entityInfo = utable.getRow(ConstTable.EntityType, entityType)
    if entityInfo then
        if entityInfo.ShowName or entityInfo.ShowHP then
            return true
        end
    end
    return false
end

function StaticAgency:ShowEffect(resPath, attachPointType, offset, removeOnDeath)
    local attachTransform = self:GetEffectDummyTrans(attachPointType)
    local effect = EffectMgr:LoadEffect(resPath, attachTransform.position + offset, attachTransform.rotation, attachPointType, EFFECT_LOD_TYPE.LodNone, true)
    effect.removeOnDeath = removeOnDeath
    ObjectUtil.SetParentRelated(effect.gameObject, attachTransform.gameObject)
    self:AddEffect(effect)
    effect:StartFx()
    effect:DelayUnload(9999)

    return effect
end

return StaticAgency