// Generated by github.com/davyxu/tabtoy
// Version: 2.9.3
// DO NOT EDIT!!
using System.Collections.Generic;

namespace table
{
	
	// Defined in table: EntityTemplate
	public enum EUnitClassType
	{
		
		
		Ball = 0, // 球
		
		
		Agency = 1, // 机关
		
		
		GameItem = 2, // 场景物件
	
	}
	
	

	// Defined in table: Config
	
	public partial class Config
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// EntityTemplate
		/// </summary>
		public List<EntityTemplateDefine> EntityTemplate = new List<EntityTemplateDefine>(); 
		
		/// <summary> 
		/// ThemeChooser
		/// </summary>
		public List<ThemeChooserDefine> ThemeChooser = new List<ThemeChooserDefine>(); 
		
		/// <summary> 
		/// Balls
		/// </summary>
		public List<BallsDefine> Balls = new List<BallsDefine>(); 
		
		/// <summary> 
		/// Levels
		/// </summary>
		public List<LevelsDefine> Levels = new List<LevelsDefine>(); 
		
		/// <summary> 
		/// Agencys
		/// </summary>
		public List<AgencysDefine> Agencys = new List<AgencysDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, EntityTemplateDefine> _EntityTemplateByEntityId = new Dictionary<int, EntityTemplateDefine>();
        public EntityTemplateDefine GetEntityTemplateByEntityId(int EntityId, EntityTemplateDefine def = default(EntityTemplateDefine))
        {
            EntityTemplateDefine ret;
            if ( _EntityTemplateByEntityId.TryGetValue( EntityId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(EntityTemplateDefine) )
			{
				TableLogger.ErrorLine("GetEntityTemplateByEntityId failed, EntityId: {0}", EntityId);
			}

            return def;
        }
		Dictionary<int, ThemeChooserDefine> _ThemeChooserByindex = new Dictionary<int, ThemeChooserDefine>();
        public ThemeChooserDefine GetThemeChooserByindex(int index, ThemeChooserDefine def = default(ThemeChooserDefine))
        {
            ThemeChooserDefine ret;
            if ( _ThemeChooserByindex.TryGetValue( index, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(ThemeChooserDefine) )
			{
				TableLogger.ErrorLine("GetThemeChooserByindex failed, index: {0}", index);
			}

            return def;
        }
		Dictionary<int, BallsDefine> _BallsByEntityId = new Dictionary<int, BallsDefine>();
        public BallsDefine GetBallsByEntityId(int EntityId, BallsDefine def = default(BallsDefine))
        {
            BallsDefine ret;
            if ( _BallsByEntityId.TryGetValue( EntityId, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(BallsDefine) )
			{
				TableLogger.ErrorLine("GetBallsByEntityId failed, EntityId: {0}", EntityId);
			}

            return def;
        }
		Dictionary<int, LevelsDefine> _LevelsByLevelID = new Dictionary<int, LevelsDefine>();
        public LevelsDefine GetLevelsByLevelID(int LevelID, LevelsDefine def = default(LevelsDefine))
        {
            LevelsDefine ret;
            if ( _LevelsByLevelID.TryGetValue( LevelID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(LevelsDefine) )
			{
				TableLogger.ErrorLine("GetLevelsByLevelID failed, LevelID: {0}", LevelID);
			}

            return def;
        }
		Dictionary<int, AgencysDefine> _AgencysByID = new Dictionary<int, AgencysDefine>();
        public AgencysDefine GetAgencysByID(int ID, AgencysDefine def = default(AgencysDefine))
        {
            AgencysDefine ret;
            if ( _AgencysByID.TryGetValue( ID, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(AgencysDefine) )
			{
				TableLogger.ErrorLine("GetAgencysByID failed, ID: {0}", ID);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "0fe5bf6021a2f59afb37c95acdc4c246";
		}
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Config> _ConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<Config> ConfigDeserializeHandler
		{
			get
			{
				if (_ConfigDeserializeHandler == null )
				{
					_ConfigDeserializeHandler = new tabtoy.DeserializeHandler<Config>(Deserialize);
				}

				return _ConfigDeserializeHandler;
			}
		}
		public static void Deserialize( Config ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0000:
                	{
						ins.EntityTemplate.Add( reader.ReadStruct<EntityTemplateDefine>(EntityTemplateDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0001:
                	{
						ins.ThemeChooser.Add( reader.ReadStruct<ThemeChooserDefine>(ThemeChooserDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.Balls.Add( reader.ReadStruct<BallsDefine>(BallsDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.Levels.Add( reader.ReadStruct<LevelsDefine>(LevelsDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0004:
                	{
						ins.Agencys.Add( reader.ReadStruct<AgencysDefine>(AgencysDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build EntityTemplate Index
			for( int i = 0;i< ins.EntityTemplate.Count;i++)
			{
				var element = ins.EntityTemplate[i];
				
				ins._EntityTemplateByEntityId.Add(element.EntityId, element);
				
			}
			
			// Build ThemeChooser Index
			for( int i = 0;i< ins.ThemeChooser.Count;i++)
			{
				var element = ins.ThemeChooser[i];
				
				ins._ThemeChooserByindex.Add(element.index, element);
				
			}
			
			// Build Balls Index
			for( int i = 0;i< ins.Balls.Count;i++)
			{
				var element = ins.Balls[i];
				
				ins._BallsByEntityId.Add(element.EntityId, element);
				
			}
			
			// Build Levels Index
			for( int i = 0;i< ins.Levels.Count;i++)
			{
				var element = ins.Levels[i];
				
				ins._LevelsByLevelID.Add(element.LevelID, element);
				
			}
			
			// Build Agencys Index
			for( int i = 0;i< ins.Agencys.Count;i++)
			{
				var element = ins.Agencys[i];
				
				ins._AgencysByID.Add(element.ID, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<Vec2> _Vec2DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec2> Vec2DeserializeHandler
		{
			get
			{
				if (_Vec2DeserializeHandler == null )
				{
					_Vec2DeserializeHandler = new tabtoy.DeserializeHandler<Vec2>(Deserialize);
				}

				return _Vec2DeserializeHandler;
			}
		}
		public static void Deserialize( Vec2 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Vec3> _Vec3DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec3> Vec3DeserializeHandler
		{
			get
			{
				if (_Vec3DeserializeHandler == null )
				{
					_Vec3DeserializeHandler = new tabtoy.DeserializeHandler<Vec3>(Deserialize);
				}

				return _Vec3DeserializeHandler;
			}
		}
		public static void Deserialize( Vec3 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50000:
                	{
						ins.X = reader.ReadFloat();
                	}
                	break; 
                	case 0x50001:
                	{
						ins.Y = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.Z = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<EntityTemplateDefine> _EntityTemplateDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<EntityTemplateDefine> EntityTemplateDefineDeserializeHandler
		{
			get
			{
				if (_EntityTemplateDefineDeserializeHandler == null )
				{
					_EntityTemplateDefineDeserializeHandler = new tabtoy.DeserializeHandler<EntityTemplateDefine>(Deserialize);
				}

				return _EntityTemplateDefineDeserializeHandler;
			}
		}
		public static void Deserialize( EntityTemplateDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.EntityId = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.EntityName = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.ResPath = reader.ReadString();
                	}
                	break; 
                	case 0x80003:
                	{
						ins.EntityType = reader.ReadEnum<EUnitClassType>();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<ThemeChooserDefine> _ThemeChooserDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<ThemeChooserDefine> ThemeChooserDefineDeserializeHandler
		{
			get
			{
				if (_ThemeChooserDefineDeserializeHandler == null )
				{
					_ThemeChooserDefineDeserializeHandler = new tabtoy.DeserializeHandler<ThemeChooserDefine>(Deserialize);
				}

				return _ThemeChooserDefineDeserializeHandler;
			}
		}
		public static void Deserialize( ThemeChooserDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.index = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.ThemeName = reader.ReadString();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.IconUrl = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.levels.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<BallsDefine> _BallsDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<BallsDefine> BallsDefineDeserializeHandler
		{
			get
			{
				if (_BallsDefineDeserializeHandler == null )
				{
					_BallsDefineDeserializeHandler = new tabtoy.DeserializeHandler<BallsDefine>(Deserialize);
				}

				return _BallsDefineDeserializeHandler;
			}
		}
		public static void Deserialize( BallsDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.EntityId = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.BallName = reader.ReadString();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.ColliderRadius = reader.ReadFloat();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.MaterialResPath = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<LevelsDefine> _LevelsDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<LevelsDefine> LevelsDefineDeserializeHandler
		{
			get
			{
				if (_LevelsDefineDeserializeHandler == null )
				{
					_LevelsDefineDeserializeHandler = new tabtoy.DeserializeHandler<LevelsDefine>(Deserialize);
				}

				return _LevelsDefineDeserializeHandler;
			}
		}
		public static void Deserialize( LevelsDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.LevelID = reader.ReadInt32();
                	}
                	break; 
                	case 0x10001:
                	{
						ins.ownerIndex = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.IconUrl = reader.ReadString();
                	}
                	break; 
                	case 0x60003:
                	{
						ins.LevelName = reader.ReadString();
                	}
                	break; 
                	case 0x90004:
                	{
						ins.SpawnPoint = reader.ReadStruct<Vec2>(Vec2DeserializeHandler);
                	}
                	break; 
                	case 0x90005:
                	{
						ins.EndPoint = reader.ReadStruct<Vec2>(Vec2DeserializeHandler);
                	}
                	break; 
                	case 0x10006:
                	{
						ins.ConstAgencys.Add( reader.ReadInt32() );
                	}
                	break; 
                	case 0x90007:
                	{
						ins.StarPoint.Add( reader.ReadStruct<Vec2>(Vec2DeserializeHandler) );
                	}
                	break; 
                	case 0x10008:
                	{
						ins.Agencys.Add( reader.ReadInt32() );
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<AgencysDefine> _AgencysDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<AgencysDefine> AgencysDefineDeserializeHandler
		{
			get
			{
				if (_AgencysDefineDeserializeHandler == null )
				{
					_AgencysDefineDeserializeHandler = new tabtoy.DeserializeHandler<AgencysDefine>(Deserialize);
				}

				return _AgencysDefineDeserializeHandler;
			}
		}
		public static void Deserialize( AgencysDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10000:
                	{
						ins.ID = reader.ReadInt32();
                	}
                	break; 
                	case 0x60001:
                	{
						ins.AgencyName = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.EntityId = reader.ReadInt32();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.ScaleMax = reader.ReadStruct<Vec3>(Vec3DeserializeHandler);
                	}
                	break; 
                	case 0x90004:
                	{
						ins.ScaleMin = reader.ReadStruct<Vec3>(Vec3DeserializeHandler);
                	}
                	break; 
                }
             } 

			
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
				EntityTemplate.Clear(); 		
				ThemeChooser.Clear(); 		
				Balls.Clear(); 		
				Levels.Clear(); 		
				Agencys.Clear(); 
			
				_EntityTemplateByEntityId.Clear(); 
				_ThemeChooserByindex.Clear(); 
				_BallsByEntityId.Clear(); 
				_LevelsByLevelID.Clear(); 
				_AgencysByID.Clear(); 
		}
		#endregion
	

	} 

	// Defined in table: Globals
	
	public partial class Vec2
	{
	
		
		
		public float X = 0f; 
		
		
		public float Y = 0f; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class Vec3
	{
	
		
		
		public float X = 0f; 
		
		
		public float Y = 0f; 
		
		
		public float Z = 0f; 
	
	

	} 

	// Defined in table: EntityTemplate
	
	public partial class EntityTemplateDefine
	{
	
		
		/// <summary> 
		/// 实体ID
		/// </summary>
		public int EntityId = 0; 
		
		/// <summary> 
		/// 实体名称
		/// </summary>
		public string EntityName = ""; 
		
		/// <summary> 
		/// prefab路径
		/// </summary>
		public string ResPath = ""; 
		
		/// <summary> 
		/// entity类型
		/// </summary>
		public EUnitClassType EntityType = EUnitClassType.Ball; 
	
	

	} 

	// Defined in table: ThemeChooser
	
	public partial class ThemeChooserDefine
	{
	
		
		/// <summary> 
		/// 页数
		/// </summary>
		public int index = 0; 
		
		/// <summary> 
		/// 主题名称
		/// </summary>
		public string ThemeName = ""; 
		
		/// <summary> 
		/// 图标路径
		/// </summary>
		public string IconUrl = ""; 
		
		/// <summary> 
		/// 主题所包含的关卡ID
		/// </summary>
		public List<int> levels = new List<int>(); 
	
	

	} 

	// Defined in table: Balls
	
	public partial class BallsDefine
	{
	
		
		/// <summary> 
		/// 实体ID
		/// </summary>
		public int EntityId = 0; 
		
		/// <summary> 
		/// 小球名称
		/// </summary>
		public string BallName = ""; 
		
		/// <summary> 
		/// collider半径
		/// </summary>
		public float ColliderRadius = 0f; 
		
		/// <summary> 
		/// 小球材质路径
		/// </summary>
		public string MaterialResPath = ""; 
	
	

	} 

	// Defined in table: Levels
	
	public partial class LevelsDefine
	{
	
		
		/// <summary> 
		/// 关卡唯一ID
		/// </summary>
		public int LevelID = 0; 
		
		
		public int ownerIndex = 0; 
		
		/// <summary> 
		/// 图标路径
		/// </summary>
		public string IconUrl = ""; 
		
		/// <summary> 
		/// 关卡名
		/// </summary>
		public string LevelName = ""; 
		
		/// <summary> 
		/// 关卡球出生点
		/// </summary>
		public Vec2 SpawnPoint = new Vec2(); 
		
		/// <summary> 
		/// 关卡结束点
		/// </summary>
		public Vec2 EndPoint = new Vec2(); 
		
		/// <summary> 
		/// 固定生成的机关ID
		/// </summary>
		public List<int> ConstAgencys = new List<int>(); 
		
		/// <summary> 
		/// 星星的位置
		/// </summary>
		public List<Vec2> StarPoint = new List<Vec2>(); 
		
		/// <summary> 
		/// 关卡可用的机关ID
		/// </summary>
		public List<int> Agencys = new List<int>(); 
	
	

	} 

	// Defined in table: Agencys
	
	public partial class AgencysDefine
	{
	
		
		/// <summary> 
		/// 机关ID
		/// </summary>
		public int ID = 0; 
		
		/// <summary> 
		/// 机关名称
		/// </summary>
		public string AgencyName = ""; 
		
		/// <summary> 
		/// 关联的实体Id
		/// </summary>
		public int EntityId = 0; 
		
		/// <summary> 
		/// 最大缩放参数
		/// </summary>
		public Vec3 ScaleMax = new Vec3(); 
		
		/// <summary> 
		/// 最小缩放参数
		/// </summary>
		public Vec3 ScaleMin = new Vec3(); 
	
	

	} 

}
